
EX1_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001cc  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000720  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000846  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
 */


#include "uart.h"

int main(){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
uint8 val= 0x03;
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	89 83       	std	Y+1, r24	; 0x01
UART_init();
  90:	0e 94 55 00 	call	0xaa	; 0xaa <UART_init>
//CLEAR_BIT(DDRD,PD0);
//SET_BIT(DDRD,PD1);
UART_sendByte(val);
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	0e 94 6f 00 	call	0xde	; 0xde <UART_sendByte>
UART_receiveByte();
  9a:	0e 94 8d 00 	call	0x11a	; 0x11a <UART_receiveByte>
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0


}
  a2:	0f 90       	pop	r0
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	08 95       	ret

000000aa <UART_init>:
 *      Author: Amr Ramadan
 */
#include "uart.h"
#define BOUD_PRESCALE (((F_CPU /(USART_BOUDRATE*8UL)))-1)

void UART_init(void) {
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	/*/*USART Control and Status Register A >> UCSRA
	 * 		U2X=1 : Enable Double USART Transmission speed
	 */
	UCSRA = (1 << U2X);
  b2:	eb e2       	ldi	r30, 0x2B	; 43
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24

	/*USART Control and Status Register B >> UCSRB
	 * 		RXC=1 :to able to
	 */
	UCSRB = (1 << RXEN) | (1 << TXEN);
  ba:	ea e2       	ldi	r30, 0x2A	; 42
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	88 e1       	ldi	r24, 0x18	; 24
  c0:	80 83       	st	Z, r24

	/* USART Control and Status Register C >> UCSRC
	 * 		URSEL = 1 : To able to write in this register
	 * 		UCSZ1:UCSZ0 = 11 : 8-bit mode
	 */
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
  c2:	e0 e4       	ldi	r30, 0x40	; 64
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	86 e8       	ldi	r24, 0x86	; 134
  c8:	80 83       	st	Z, r24

	//The URSEL must be zero when writing the UBRRH.
	UBRRH = 0;
  ca:	e0 e4       	ldi	r30, 0x40	; 64
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
	UBRRL = BOUD_PRESCALE;
  d0:	e9 e2       	ldi	r30, 0x29	; 41
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	80 83       	st	Z, r24

}
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <UART_sendByte>:
 * Note:
 * 		The USART Transmit Data Buffer Register
 * 		and USART Receive Data Buffer Registers share the
 * 		same I/O address referred to as USART Data Register or UDR.
 */
void UART_sendByte(uint8 Data) {
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	89 83       	std	Y+1, r24	; 0x01
	UDR = Data;   // copy char into UDR register
  ea:	ec e2       	ldi	r30, 0x2C	; 44
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(UCSRA, TXC))
  f2:	eb e2       	ldi	r30, 0x2B	; 43
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	80 74       	andi	r24, 0x40	; 64
  fe:	90 70       	andi	r25, 0x00	; 0
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	b9 f3       	breq	.-18     	; 0xf2 <UART_sendByte+0x14>
		; // wait until transmission complete ( flag is set )
	SET_BIT(UCSRA, TXC); // Clear the TXC flag
 104:	ab e2       	ldi	r26, 0x2B	; 43
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	eb e2       	ldi	r30, 0x2B	; 43
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	8c 93       	st	X, r24
}
 112:	0f 90       	pop	r0
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	08 95       	ret

0000011a <UART_receiveByte>:

uint8 UART_receiveByte(void) {
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	/*
	 * RXC flag is set when the UART Receive data
	 * Read the received data from RX buffer (UDR)
	 * wait until the RXC flag is cleared after read the data
	 */
	while (BIT_IS_CLEAR(UCSRA, RXC))
 122:	eb e2       	ldi	r30, 0x2B	; 43
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	dc f7       	brge	.-10     	; 0x122 <UART_receiveByte+0x8>
		; // Receive Buffer is Empty ( no pending data )
	return UDR;
 12c:	ec e2       	ldi	r30, 0x2C	; 44
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
}
 132:	cf 91       	pop	r28
 134:	df 91       	pop	r29
 136:	08 95       	ret

00000138 <UART_sendString>:

void UART_sendString(uint8 *Ptr) {
 138:	df 93       	push	r29
 13a:	cf 93       	push	r28
 13c:	00 d0       	rcall	.+0      	; 0x13e <UART_sendString+0x6>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	9a 83       	std	Y+2, r25	; 0x02
 144:	89 83       	std	Y+1, r24	; 0x01
 146:	0a c0       	rjmp	.+20     	; 0x15c <UART_sendString+0x24>
	while (*Ptr != "\0") {
		UART_sendByte(*Ptr);
 148:	e9 81       	ldd	r30, Y+1	; 0x01
 14a:	fa 81       	ldd	r31, Y+2	; 0x02
 14c:	80 81       	ld	r24, Z
 14e:	0e 94 6f 00 	call	0xde	; 0xde <UART_sendByte>
		Ptr++;
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	9a 83       	std	Y+2, r25	; 0x02
 15a:	89 83       	std	Y+1, r24	; 0x01
		; // Receive Buffer is Empty ( no pending data )
	return UDR;
}

void UART_sendString(uint8 *Ptr) {
	while (*Ptr != "\0") {
 15c:	e9 81       	ldd	r30, Y+1	; 0x01
 15e:	fa 81       	ldd	r31, Y+2	; 0x02
 160:	80 81       	ld	r24, Z
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	80 36       	cpi	r24, 0x60	; 96
 16a:	92 07       	cpc	r25, r18
 16c:	69 f7       	brne	.-38     	; 0x148 <UART_sendString+0x10>
		UART_sendByte(*Ptr);
		Ptr++;
	}
}
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	cf 91       	pop	r28
 174:	df 91       	pop	r29
 176:	08 95       	ret

00000178 <UART_receiveString>:

void UART_receiveString(uint8 *Ptr) {
 178:	df 93       	push	r29
 17a:	cf 93       	push	r28
 17c:	00 d0       	rcall	.+0      	; 0x17e <UART_receiveString+0x6>
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	9a 83       	std	Y+2, r25	; 0x02
 184:	89 83       	std	Y+1, r24	; 0x01
	*Ptr = UART_receiveByte();
 186:	0e 94 8d 00 	call	0x11a	; 0x11a <UART_receiveByte>
 18a:	e9 81       	ldd	r30, Y+1	; 0x01
 18c:	fa 81       	ldd	r31, Y+2	; 0x02
 18e:	80 83       	st	Z, r24
 190:	0a c0       	rjmp	.+20     	; 0x1a6 <UART_receiveString+0x2e>
	while (*Ptr != "#") {
		Ptr++;
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	9a 81       	ldd	r25, Y+2	; 0x02
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	9a 83       	std	Y+2, r25	; 0x02
 19a:	89 83       	std	Y+1, r24	; 0x01
		*Ptr = UART_receiveByte();
 19c:	0e 94 8d 00 	call	0x11a	; 0x11a <UART_receiveByte>
 1a0:	e9 81       	ldd	r30, Y+1	; 0x01
 1a2:	fa 81       	ldd	r31, Y+2	; 0x02
 1a4:	80 83       	st	Z, r24
	}
}

void UART_receiveString(uint8 *Ptr) {
	*Ptr = UART_receiveByte();
	while (*Ptr != "#") {
 1a6:	e9 81       	ldd	r30, Y+1	; 0x01
 1a8:	fa 81       	ldd	r31, Y+2	; 0x02
 1aa:	80 81       	ld	r24, Z
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	82 36       	cpi	r24, 0x62	; 98
 1b4:	92 07       	cpc	r25, r18
 1b6:	69 f7       	brne	.-38     	; 0x192 <UART_receiveString+0x1a>
		Ptr++;
		*Ptr = UART_receiveByte();
	}
	*Ptr = '\0';
 1b8:	e9 81       	ldd	r30, Y+1	; 0x01
 1ba:	fa 81       	ldd	r31, Y+2	; 0x02
 1bc:	10 82       	st	Z, r1
}
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	cf 91       	pop	r28
 1c4:	df 91       	pop	r29
 1c6:	08 95       	ret

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
