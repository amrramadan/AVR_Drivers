
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001d10  00001d84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000020d0  00000000  00000000  00001d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001016  00000000  00000000  00003e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000512a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000095c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b5 0c 	call	0x196a	; 0x196a <main>
      7a:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_init>:
 */

#include "adc.h"

//ADC initialization Function
void ADC_init(enum ADC_prescaller ADC_DF) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	89 83       	std	Y+1, r24	; 0x01

	/* ADMUX : REFS1:0 = 00 External Reference Voltage Vref
	 * 		   ADLAR   =	0  Right Adjusted
	 * 		   MUX4:0  = 0000 to Choose ADC Channel 0
	 */
	ADMUX = 0;
     b42:	e7 e2       	ldi	r30, 0x27	; 39
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	10 82       	st	Z, r1
	/*
	 *  ADCSRA : ADEN    = 1 for ADC Enable
	 *  	   : ADIE    = 0 for Interrupt Disable
	 *  	   : ADPS2:0 = User Configurable
	 */
	ADCSRA = (1 << ADEN) | (ADC_DF & 0X07);
     b48:	e6 e2       	ldi	r30, 0x26	; 38
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	87 70       	andi	r24, 0x07	; 7
     b50:	80 68       	ori	r24, 0x80	; 128
     b52:	80 83       	st	Z, r24

}
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <ADC_readChannel>:

uint16 ADC_readChannel(uint8 ch_num) {
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	0f 92       	push	r0
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = (ADMUX & (0xE0)) | (ch_num & 0X07); // Clear First 5-bits in ADUMX Register and SET the required Channel Number
     b68:	a7 e2       	ldi	r26, 0x27	; 39
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e7 e2       	ldi	r30, 0x27	; 39
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	98 2f       	mov	r25, r24
     b74:	90 7e       	andi	r25, 0xE0	; 224
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	87 70       	andi	r24, 0x07	; 7
     b7a:	89 2b       	or	r24, r25
     b7c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC); //ADC Start Conversion
     b7e:	a6 e2       	ldi	r26, 0x26	; 38
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e6 e2       	ldi	r30, 0x26	; 38
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	80 64       	ori	r24, 0x40	; 64
     b8a:	8c 93       	st	X, r24
	while (BIT_IS_CLEAR(ADCSRA, ADIF)); //Wait for Conversion Complete
     b8c:	e6 e2       	ldi	r30, 0x26	; 38
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	80 71       	andi	r24, 0x10	; 16
     b98:	90 70       	andi	r25, 0x00	; 0
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	b9 f3       	breq	.-18     	; 0xb8c <ADC_readChannel+0x30>
	SET_BIT(ADCSRA, ADIF); // CLEAR ADIF BIT
     b9e:	a6 e2       	ldi	r26, 0x26	; 38
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e6 e2       	ldi	r30, 0x26	; 38
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	80 61       	ori	r24, 0x10	; 16
     baa:	8c 93       	st	X, r24
	return ADC; // RETURN Data Register
     bac:	e4 e2       	ldi	r30, 0x24	; 36
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	91 81       	ldd	r25, Z+1	; 0x01
}
     bb4:	0f 90       	pop	r0
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <EEPROM_init>:

#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	TWI_init();
     bc4:	0e 94 88 06 	call	0xd10	; 0xd10 <TWI_init>
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 Address, uint8 Data){
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <EEPROM_writeByte+0x6>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <EEPROM_writeByte+0x8>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	9a 83       	std	Y+2, r25	; 0x02
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	6b 83       	std	Y+3, r22	; 0x03
	/* Send Start Bit */
	TWI_start();
     be0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <TWI_start>
	if(TWI_getStatus() != TW_START)
     be4:	0e 94 f6 06 	call	0xdec	; 0xdec <TWI_getStatus>
     be8:	88 30       	cpi	r24, 0x08	; 8
     bea:	11 f0       	breq	.+4      	; 0xbf0 <EEPROM_writeByte+0x22>
		return ERROR;
     bec:	1c 82       	std	Y+4, r1	; 0x04
     bee:	28 c0       	rjmp	.+80     	; 0xc40 <EEPROM_writeByte+0x72>
	/*Send the Device Address*/
	/*
	 * NOTE: We get bits A10, A9, A8 and R/W = 0 (WRITE)
	 */
	TWI_write((uint8)(0xA0 |((Address & 0x0700)>>7)));
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	80 70       	andi	r24, 0x00	; 0
     bf6:	97 70       	andi	r25, 0x07	; 7
     bf8:	88 0f       	add	r24, r24
     bfa:	89 2f       	mov	r24, r25
     bfc:	88 1f       	adc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	91 95       	neg	r25
     c02:	80 6a       	ori	r24, 0xA0	; 160
     c04:	0e 94 b9 06 	call	0xd72	; 0xd72 <TWI_write>
	if(TWI_getStatus() != TW_MT_SLA_W_ACK)
     c08:	0e 94 f6 06 	call	0xdec	; 0xdec <TWI_getStatus>
     c0c:	88 31       	cpi	r24, 0x18	; 24
     c0e:	11 f0       	breq	.+4      	; 0xc14 <EEPROM_writeByte+0x46>
			return ERROR;
     c10:	1c 82       	std	Y+4, r1	; 0x04
     c12:	16 c0       	rjmp	.+44     	; 0xc40 <EEPROM_writeByte+0x72>

	/* Send Required Memory Location */
	TWI_write((uint8) Address);
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	0e 94 b9 06 	call	0xd72	; 0xd72 <TWI_write>
	if(TWI_getStatus() != TW_MT_DATA_ACK)
     c1a:	0e 94 f6 06 	call	0xdec	; 0xdec <TWI_getStatus>
     c1e:	88 32       	cpi	r24, 0x28	; 40
     c20:	11 f0       	breq	.+4      	; 0xc26 <EEPROM_writeByte+0x58>
			return ERROR;
     c22:	1c 82       	std	Y+4, r1	; 0x04
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <EEPROM_writeByte+0x72>

	/* Send Byte (Data) */
	TWI_write(Data);
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	0e 94 b9 06 	call	0xd72	; 0xd72 <TWI_write>
	if(TWI_getStatus() != TW_MT_DATA_ACK)
     c2c:	0e 94 f6 06 	call	0xdec	; 0xdec <TWI_getStatus>
     c30:	88 32       	cpi	r24, 0x28	; 40
     c32:	11 f0       	breq	.+4      	; 0xc38 <EEPROM_writeByte+0x6a>
			return ERROR;
     c34:	1c 82       	std	Y+4, r1	; 0x04
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <EEPROM_writeByte+0x72>

	/*Send Stop Bit*/
	TWI_stop();
     c38:	0e 94 ae 06 	call	0xd5c	; 0xd5c <TWI_stop>
	return SUCCESS;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	8c 83       	std	Y+4, r24	; 0x04
     c40:	8c 81       	ldd	r24, Y+4	; 0x04

}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 Address, uint8 *Data){
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	00 d0       	rcall	.+0      	; 0xc56 <EEPROM_readByte+0x6>
     c56:	00 d0       	rcall	.+0      	; 0xc58 <EEPROM_readByte+0x8>
     c58:	0f 92       	push	r0
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01
     c62:	7c 83       	std	Y+4, r23	; 0x04
     c64:	6b 83       	std	Y+3, r22	; 0x03
	/* Send Start Bit */
	TWI_start();
     c66:	0e 94 9e 06 	call	0xd3c	; 0xd3c <TWI_start>
	if(TWI_getStatus() != TW_START)
     c6a:	0e 94 f6 06 	call	0xdec	; 0xdec <TWI_getStatus>
     c6e:	88 30       	cpi	r24, 0x08	; 8
     c70:	11 f0       	breq	.+4      	; 0xc76 <EEPROM_readByte+0x26>
		return ERROR;
     c72:	1d 82       	std	Y+5, r1	; 0x05
     c74:	44 c0       	rjmp	.+136    	; 0xcfe <EEPROM_readByte+0xae>

	/*Send the Device Address*/
	/*
	 * NOTE: We get bits A10, A9, A8 and R/W = 0 (WRITE)
	 */
	 TWI_write((uint8)((0xA0) | ((Address & 0x0700)>>7)));
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	80 70       	andi	r24, 0x00	; 0
     c7c:	97 70       	andi	r25, 0x07	; 7
     c7e:	88 0f       	add	r24, r24
     c80:	89 2f       	mov	r24, r25
     c82:	88 1f       	adc	r24, r24
     c84:	99 0b       	sbc	r25, r25
     c86:	91 95       	neg	r25
     c88:	80 6a       	ori	r24, 0xA0	; 160
     c8a:	0e 94 b9 06 	call	0xd72	; 0xd72 <TWI_write>
	if(TWI_getStatus() != TW_MT_SLA_W_ACK)
     c8e:	0e 94 f6 06 	call	0xdec	; 0xdec <TWI_getStatus>
     c92:	88 31       	cpi	r24, 0x18	; 24
     c94:	11 f0       	breq	.+4      	; 0xc9a <EEPROM_readByte+0x4a>
			return ERROR;
     c96:	1d 82       	std	Y+5, r1	; 0x05
     c98:	32 c0       	rjmp	.+100    	; 0xcfe <EEPROM_readByte+0xae>

	/* Send Required Memory Location */
	TWI_write((uint8) (Address));
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	0e 94 b9 06 	call	0xd72	; 0xd72 <TWI_write>
	if(TWI_getStatus() != TW_MT_DATA_ACK)
     ca0:	0e 94 f6 06 	call	0xdec	; 0xdec <TWI_getStatus>
     ca4:	88 32       	cpi	r24, 0x28	; 40
     ca6:	11 f0       	breq	.+4      	; 0xcac <EEPROM_readByte+0x5c>
			return ERROR;
     ca8:	1d 82       	std	Y+5, r1	; 0x05
     caa:	29 c0       	rjmp	.+82     	; 0xcfe <EEPROM_readByte+0xae>

	/* Send Start Bit */
	TWI_start();
     cac:	0e 94 9e 06 	call	0xd3c	; 0xd3c <TWI_start>
	if(TWI_getStatus() != TW_REP_START)
     cb0:	0e 94 f6 06 	call	0xdec	; 0xdec <TWI_getStatus>
     cb4:	80 31       	cpi	r24, 0x10	; 16
     cb6:	11 f0       	breq	.+4      	; 0xcbc <EEPROM_readByte+0x6c>
		return ERROR;
     cb8:	1d 82       	std	Y+5, r1	; 0x05
     cba:	21 c0       	rjmp	.+66     	; 0xcfe <EEPROM_readByte+0xae>

	/*
	 * NOTE: We get bits A10, A9, A8 and R/W = 1 (Read)
	 */
	TWI_write((uint8)((0xA0) | ((Address & 0x0700)>>7) | 1));
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
     cc0:	80 70       	andi	r24, 0x00	; 0
     cc2:	97 70       	andi	r25, 0x07	; 7
     cc4:	88 0f       	add	r24, r24
     cc6:	89 2f       	mov	r24, r25
     cc8:	88 1f       	adc	r24, r24
     cca:	99 0b       	sbc	r25, r25
     ccc:	91 95       	neg	r25
     cce:	81 6a       	ori	r24, 0xA1	; 161
     cd0:	0e 94 b9 06 	call	0xd72	; 0xd72 <TWI_write>
	if(TWI_getStatus() != TW_MT_SLA_R_ACK)
     cd4:	0e 94 f6 06 	call	0xdec	; 0xdec <TWI_getStatus>
     cd8:	80 34       	cpi	r24, 0x40	; 64
     cda:	11 f0       	breq	.+4      	; 0xce0 <EEPROM_readByte+0x90>
			return ERROR;
     cdc:	1d 82       	std	Y+5, r1	; 0x05
     cde:	0f c0       	rjmp	.+30     	; 0xcfe <EEPROM_readByte+0xae>

	/* Read Byte from Memory with NACK */
	*Data = TWI_readWithNACK();
     ce0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <TWI_readWithNACK>
     ce4:	eb 81       	ldd	r30, Y+3	; 0x03
     ce6:	fc 81       	ldd	r31, Y+4	; 0x04
     ce8:	80 83       	st	Z, r24
	if(TWI_getStatus() != TW_MR_DATA_NACK)
     cea:	0e 94 f6 06 	call	0xdec	; 0xdec <TWI_getStatus>
     cee:	88 35       	cpi	r24, 0x58	; 88
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <EEPROM_readByte+0xa6>
			return ERROR;
     cf2:	1d 82       	std	Y+5, r1	; 0x05
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <EEPROM_readByte+0xae>

	/*Send Stop Bit*/
	TWI_stop();
     cf6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <TWI_stop>
	return SUCCESS;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05

}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <TWI_init>:
 */

#include "i2c.h"

void TWI_init(void)
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     d18:	e0 e2       	ldi	r30, 0x20	; 32
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	80 83       	st	Z, r24
	TWSR = 0x00;
     d20:	e1 e2       	ldi	r30, 0x21	; 33
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
     d26:	e2 e2       	ldi	r30, 0x22	; 34
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
     d2e:	e6 e5       	ldi	r30, 0x56	; 86
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	84 e0       	ldi	r24, 0x04	; 4
     d34:	80 83       	st	Z, r24
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <TWI_start>:

void TWI_start(void) {
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
/*
 * TWEN  = 1 : Enable TWI Protocol
 * TWINT = 1 : Clear Interrupt Flag
 * TWSTA = 1 : Send Start Bit
 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
     d44:	e6 e5       	ldi	r30, 0x56	; 86
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	84 ea       	ldi	r24, 0xA4	; 164
     d4a:	80 83       	st	Z, r24
	/*wait until Start bit send successfully*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
     d4c:	e6 e5       	ldi	r30, 0x56	; 86
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 23       	and	r24, r24
     d54:	dc f7       	brge	.-10     	; 0xd4c <TWI_start+0x10>
}
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <TWI_stop>:

void TWI_stop(void)
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
	/*
	 * TWEN  = 1 : Enable TWI Protocol
	 * TWINT = 1 : Clear Interrupt Flag
	 * TWSTA = 1 : Send Stop Bit
	 */
		TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
     d64:	e6 e5       	ldi	r30, 0x56	; 86
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	84 e9       	ldi	r24, 0x94	; 148
     d6a:	80 83       	st	Z, r24
}
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <TWI_write>:

void TWI_write(uint8 Data){
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	0f 92       	push	r0
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	89 83       	std	Y+1, r24	; 0x01
	// initiate Data Register With Data
	TWDR = Data;
     d7e:	e3 e2       	ldi	r30, 0x23	; 35
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	80 83       	st	Z, r24
	/*
	 * TWEN  = 1 : Enable TWI Protocol
	 * TWINT = 1 : Clear Interrupt Flag
	 */

	TWCR = (1<<TWEN) | (1<<TWINT);
     d86:	e6 e5       	ldi	r30, 0x56	; 86
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	84 e8       	ldi	r24, 0x84	; 132
     d8c:	80 83       	st	Z, r24
	/*wait until data is send successfully*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
     d8e:	e6 e5       	ldi	r30, 0x56	; 86
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	88 23       	and	r24, r24
     d96:	dc f7       	brge	.-10     	; 0xd8e <TWI_write+0x1c>
}
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <TWI_readWithACK>:

uint8 TWI_readWithACK(void){
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * TWEN  = 1 : Enable TWI Protocol
	 * TWINT = 1 : Clear Interrupt Flag
	 * TWEA  = 1 : Enable Acknowledge Bit
	 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
     da8:	e6 e5       	ldi	r30, 0x56	; 86
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	84 ec       	ldi	r24, 0xC4	; 196
     dae:	80 83       	st	Z, r24
	/*wait until Ack is received successfully*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
     db0:	e6 e5       	ldi	r30, 0x56	; 86
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	88 23       	and	r24, r24
     db8:	dc f7       	brge	.-10     	; 0xdb0 <TWI_readWithACK+0x10>
	return TWDR; //Read Data
     dba:	e3 e2       	ldi	r30, 0x23	; 35
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z

}
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <TWI_readWithNACK>:
uint8 TWI_readWithNACK(void){
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * TWEN  = 1 : Enable TWI Protocol
	 * TWINT = 1 : Clear Interrupt Flag
	 */
	TWCR = (1<<TWEN) | (1<<TWINT);
     dce:	e6 e5       	ldi	r30, 0x56	; 86
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	84 e8       	ldi	r24, 0x84	; 132
     dd4:	80 83       	st	Z, r24
	/*wait until data is received successfully*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
     dd6:	e6 e5       	ldi	r30, 0x56	; 86
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	88 23       	and	r24, r24
     dde:	dc f7       	brge	.-10     	; 0xdd6 <TWI_readWithNACK+0x10>
	return TWDR; //Read Data
     de0:	e3 e2       	ldi	r30, 0x23	; 35
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
}
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <TWI_getStatus>:

uint8 TWI_getStatus(void){
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	0f 92       	push	r0
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status = TWSR & 0xF8;
     df6:	e1 e2       	ldi	r30, 0x21	; 33
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	88 7f       	andi	r24, 0xF8	; 248
     dfe:	89 83       	std	Y+1, r24	; 0x01
	return status;
     e00:	89 81       	ldd	r24, Y+1	; 0x01
}
     e02:	0f 90       	pop	r0
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <Keypad_4x4_adjust>:
	}
}

#elif(N_Col == 4)
//note: this function designed for proteus 4x4 keypad
static uint8 Keypad_4x4_adjust(uint8 button_number) {
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <Keypad_4x4_adjust+0x6>
     e10:	00 d0       	rcall	.+0      	; 0xe12 <Keypad_4x4_adjust+0x8>
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number) {
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	3c 83       	std	Y+4, r19	; 0x04
     e20:	2b 83       	std	Y+3, r18	; 0x03
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	88 30       	cpi	r24, 0x08	; 8
     e28:	91 05       	cpc	r25, r1
     e2a:	09 f4       	brne	.+2      	; 0xe2e <Keypad_4x4_adjust+0x24>
     e2c:	70 c0       	rjmp	.+224    	; 0xf0e <Keypad_4x4_adjust+0x104>
     e2e:	2b 81       	ldd	r18, Y+3	; 0x03
     e30:	3c 81       	ldd	r19, Y+4	; 0x04
     e32:	29 30       	cpi	r18, 0x09	; 9
     e34:	31 05       	cpc	r19, r1
     e36:	5c f5       	brge	.+86     	; 0xe8e <Keypad_4x4_adjust+0x84>
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	84 30       	cpi	r24, 0x04	; 4
     e3e:	91 05       	cpc	r25, r1
     e40:	09 f4       	brne	.+2      	; 0xe44 <Keypad_4x4_adjust+0x3a>
     e42:	59 c0       	rjmp	.+178    	; 0xef6 <Keypad_4x4_adjust+0xec>
     e44:	2b 81       	ldd	r18, Y+3	; 0x03
     e46:	3c 81       	ldd	r19, Y+4	; 0x04
     e48:	25 30       	cpi	r18, 0x05	; 5
     e4a:	31 05       	cpc	r19, r1
     e4c:	9c f4       	brge	.+38     	; 0xe74 <Keypad_4x4_adjust+0x6a>
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	9c 81       	ldd	r25, Y+4	; 0x04
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	91 05       	cpc	r25, r1
     e56:	09 f4       	brne	.+2      	; 0xe5a <Keypad_4x4_adjust+0x50>
     e58:	48 c0       	rjmp	.+144    	; 0xeea <Keypad_4x4_adjust+0xe0>
     e5a:	2b 81       	ldd	r18, Y+3	; 0x03
     e5c:	3c 81       	ldd	r19, Y+4	; 0x04
     e5e:	23 30       	cpi	r18, 0x03	; 3
     e60:	31 05       	cpc	r19, r1
     e62:	0c f0       	brlt	.+2      	; 0xe66 <Keypad_4x4_adjust+0x5c>
     e64:	45 c0       	rjmp	.+138    	; 0xef0 <Keypad_4x4_adjust+0xe6>
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	91 05       	cpc	r25, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <Keypad_4x4_adjust+0x68>
     e70:	39 c0       	rjmp	.+114    	; 0xee4 <Keypad_4x4_adjust+0xda>
     e72:	67 c0       	rjmp	.+206    	; 0xf42 <Keypad_4x4_adjust+0x138>
     e74:	2b 81       	ldd	r18, Y+3	; 0x03
     e76:	3c 81       	ldd	r19, Y+4	; 0x04
     e78:	26 30       	cpi	r18, 0x06	; 6
     e7a:	31 05       	cpc	r19, r1
     e7c:	09 f4       	brne	.+2      	; 0xe80 <Keypad_4x4_adjust+0x76>
     e7e:	41 c0       	rjmp	.+130    	; 0xf02 <Keypad_4x4_adjust+0xf8>
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	87 30       	cpi	r24, 0x07	; 7
     e86:	91 05       	cpc	r25, r1
     e88:	0c f0       	brlt	.+2      	; 0xe8c <Keypad_4x4_adjust+0x82>
     e8a:	3e c0       	rjmp	.+124    	; 0xf08 <Keypad_4x4_adjust+0xfe>
     e8c:	37 c0       	rjmp	.+110    	; 0xefc <Keypad_4x4_adjust+0xf2>
     e8e:	2b 81       	ldd	r18, Y+3	; 0x03
     e90:	3c 81       	ldd	r19, Y+4	; 0x04
     e92:	2c 30       	cpi	r18, 0x0C	; 12
     e94:	31 05       	cpc	r19, r1
     e96:	09 f4       	brne	.+2      	; 0xe9a <Keypad_4x4_adjust+0x90>
     e98:	46 c0       	rjmp	.+140    	; 0xf26 <Keypad_4x4_adjust+0x11c>
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	9c 81       	ldd	r25, Y+4	; 0x04
     e9e:	8d 30       	cpi	r24, 0x0D	; 13
     ea0:	91 05       	cpc	r25, r1
     ea2:	5c f4       	brge	.+22     	; 0xeba <Keypad_4x4_adjust+0xb0>
     ea4:	2b 81       	ldd	r18, Y+3	; 0x03
     ea6:	3c 81       	ldd	r19, Y+4	; 0x04
     ea8:	2a 30       	cpi	r18, 0x0A	; 10
     eaa:	31 05       	cpc	r19, r1
     eac:	b1 f1       	breq	.+108    	; 0xf1a <Keypad_4x4_adjust+0x110>
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	8b 30       	cpi	r24, 0x0B	; 11
     eb4:	91 05       	cpc	r25, r1
     eb6:	a4 f5       	brge	.+104    	; 0xf20 <Keypad_4x4_adjust+0x116>
     eb8:	2d c0       	rjmp	.+90     	; 0xf14 <Keypad_4x4_adjust+0x10a>
     eba:	2b 81       	ldd	r18, Y+3	; 0x03
     ebc:	3c 81       	ldd	r19, Y+4	; 0x04
     ebe:	2e 30       	cpi	r18, 0x0E	; 14
     ec0:	31 05       	cpc	r19, r1
     ec2:	b9 f1       	breq	.+110    	; 0xf32 <Keypad_4x4_adjust+0x128>
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	8e 30       	cpi	r24, 0x0E	; 14
     eca:	91 05       	cpc	r25, r1
     ecc:	7c f1       	brlt	.+94     	; 0xf2c <Keypad_4x4_adjust+0x122>
     ece:	2b 81       	ldd	r18, Y+3	; 0x03
     ed0:	3c 81       	ldd	r19, Y+4	; 0x04
     ed2:	2f 30       	cpi	r18, 0x0F	; 15
     ed4:	31 05       	cpc	r19, r1
     ed6:	79 f1       	breq	.+94     	; 0xf36 <Keypad_4x4_adjust+0x12c>
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	80 31       	cpi	r24, 0x10	; 16
     ede:	91 05       	cpc	r25, r1
     ee0:	69 f1       	breq	.+90     	; 0xf3c <Keypad_4x4_adjust+0x132>
     ee2:	2f c0       	rjmp	.+94     	; 0xf42 <Keypad_4x4_adjust+0x138>
	case 1:
		return 7;
     ee4:	97 e0       	ldi	r25, 0x07	; 7
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	2e c0       	rjmp	.+92     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 2:
		return 8;
     eea:	28 e0       	ldi	r18, 0x08	; 8
     eec:	2a 83       	std	Y+2, r18	; 0x02
     eee:	2b c0       	rjmp	.+86     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 3:
		return 9;
     ef0:	39 e0       	ldi	r19, 0x09	; 9
     ef2:	3a 83       	std	Y+2, r19	; 0x02
     ef4:	28 c0       	rjmp	.+80     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 4:
		return '%';
     ef6:	85 e2       	ldi	r24, 0x25	; 37
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	25 c0       	rjmp	.+74     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 5:
		return 4;
     efc:	94 e0       	ldi	r25, 0x04	; 4
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	22 c0       	rjmp	.+68     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 6:
		return 5;
     f02:	25 e0       	ldi	r18, 0x05	; 5
     f04:	2a 83       	std	Y+2, r18	; 0x02
     f06:	1f c0       	rjmp	.+62     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 7:
		return 6;
     f08:	36 e0       	ldi	r19, 0x06	; 6
     f0a:	3a 83       	std	Y+2, r19	; 0x02
     f0c:	1c c0       	rjmp	.+56     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 8:
		return '*';
     f0e:	8a e2       	ldi	r24, 0x2A	; 42
     f10:	8a 83       	std	Y+2, r24	; 0x02
     f12:	19 c0       	rjmp	.+50     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 9:
		return 1;
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	16 c0       	rjmp	.+44     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 10:
		return 2;
     f1a:	22 e0       	ldi	r18, 0x02	; 2
     f1c:	2a 83       	std	Y+2, r18	; 0x02
     f1e:	13 c0       	rjmp	.+38     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 11:
		return 3;
     f20:	33 e0       	ldi	r19, 0x03	; 3
     f22:	3a 83       	std	Y+2, r19	; 0x02
     f24:	10 c0       	rjmp	.+32     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 12:
		return '-';
     f26:	8d e2       	ldi	r24, 0x2D	; 45
     f28:	8a 83       	std	Y+2, r24	; 0x02
     f2a:	0d c0       	rjmp	.+26     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 13:
		return 13;
     f2c:	9d e0       	ldi	r25, 0x0D	; 13
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	0a c0       	rjmp	.+20     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 14:
		return 0;
     f32:	1a 82       	std	Y+2, r1	; 0x02
     f34:	08 c0       	rjmp	.+16     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 15:
		return '=';
     f36:	2d e3       	ldi	r18, 0x3D	; 61
     f38:	2a 83       	std	Y+2, r18	; 0x02
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;
	case 16:
		return '+';
     f3c:	3b e2       	ldi	r19, 0x2B	; 43
     f3e:	3a 83       	std	Y+2, r19	; 0x02
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <Keypad_4x4_adjust+0x13c>
		break;

	default:
		return button_number;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	8a 81       	ldd	r24, Y+2	; 0x02

	}
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <Keypad_getPressedKey>:
#endif

uint8 Keypad_getPressedKey(void) {
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <Keypad_getPressedKey+0x6>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	uint8 col, row;
	while (1) {
		for (col = 0; col < N_Col; col++) {
     f60:	1a 82       	std	Y+2, r1	; 0x02
     f62:	4b c0       	rjmp	.+150    	; 0xffa <Keypad_getPressedKey+0xa4>
			KEYPAD_PORT_DIR = (0b00010000 << col); // each time one of col pins will be output pin
     f64:	ea e3       	ldi	r30, 0x3A	; 58
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	80 e1       	ldi	r24, 0x10	; 16
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <Keypad_getPressedKey+0x22>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	2a 95       	dec	r18
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <Keypad_getPressedKey+0x1e>
     f7c:	80 83       	st	Z, r24
			KEYPAD_PORT_OUT = (~(0b00010000) << col); // each time enable internal pullup for one pin
     f7e:	eb e3       	ldi	r30, 0x3B	; 59
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	8f ee       	ldi	r24, 0xEF	; 239
     f8a:	9f ef       	ldi	r25, 0xFF	; 255
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <Keypad_getPressedKey+0x3e>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <Keypad_getPressedKey+0x3a>
     f98:	80 83       	st	Z, r24
			for (row = 0; row < N_Row; row++) {
     f9a:	19 82       	std	Y+1, r1	; 0x01
     f9c:	28 c0       	rjmp	.+80     	; 0xfee <Keypad_getPressedKey+0x98>
				if (!(KEYPAD_PORT_IN & (1 << row))) { // check if switch pressed
     f9e:	e9 e3       	ldi	r30, 0x39	; 57
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	88 2f       	mov	r24, r24
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a9 01       	movw	r20, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <Keypad_getPressedKey+0x60>
     fb2:	55 95       	asr	r21
     fb4:	47 95       	ror	r20
     fb6:	8a 95       	dec	r24
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <Keypad_getPressedKey+0x5c>
     fba:	ca 01       	movw	r24, r20
     fbc:	81 70       	andi	r24, 0x01	; 1
     fbe:	90 70       	andi	r25, 0x00	; 0
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	91 f4       	brne	.+36     	; 0xfe8 <Keypad_getPressedKey+0x92>
					#if(N_Col==3)
						return Keypad_4x4_adjust((row*N_Col)+col+1);
					#elif(N_Col==4)
						return Keypad_4x4_adjust((row * N_Col) + col + 1);
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	98 2f       	mov	r25, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	89 0f       	add	r24, r25
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	0e 94 05 07 	call	0xe0a	; 0xe0a <Keypad_4x4_adjust>
					#endif
				}
			}
		}
	}
}
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret
	uint8 col, row;
	while (1) {
		for (col = 0; col < N_Col; col++) {
			KEYPAD_PORT_DIR = (0b00010000 << col); // each time one of col pins will be output pin
			KEYPAD_PORT_OUT = (~(0b00010000) << col); // each time enable internal pullup for one pin
			for (row = 0; row < N_Row; row++) {
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	a8 f2       	brcs	.-86     	; 0xf9e <Keypad_getPressedKey+0x48>
#endif

uint8 Keypad_getPressedKey(void) {
	uint8 col, row;
	while (1) {
		for (col = 0; col < N_Col; col++) {
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	8a 83       	std	Y+2, r24	; 0x02
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	84 30       	cpi	r24, 0x04	; 4
     ffe:	08 f4       	brcc	.+2      	; 0x1002 <Keypad_getPressedKey+0xac>
    1000:	b1 cf       	rjmp	.-158    	; 0xf64 <Keypad_getPressedKey+0xe>
    1002:	ae cf       	rjmp	.-164    	; 0xf60 <Keypad_getPressedKey+0xa>

00001004 <LCD_sendCommand>:
 *      Author: Amr Ramadan
 */

#include "lcd.h"

void LCD_sendCommand(uint8 command) {
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	e9 97       	sbiw	r28, 0x39	; 57
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT, RS); //instruction select
    101a:	a2 e3       	ldi	r26, 0x32	; 50
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e2 e3       	ldi	r30, 0x32	; 50
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8f 7e       	andi	r24, 0xEF	; 239
    1026:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW); //Write on LCD
    1028:	a2 e3       	ldi	r26, 0x32	; 50
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e2 e3       	ldi	r30, 0x32	; 50
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 7d       	andi	r24, 0xDF	; 223
    1034:	8c 93       	st	X, r24
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a0 e8       	ldi	r26, 0x80	; 128
    103c:	bf e3       	ldi	r27, 0x3F	; 63
    103e:	8d ab       	std	Y+53, r24	; 0x35
    1040:	9e ab       	std	Y+54, r25	; 0x36
    1042:	af ab       	std	Y+55, r26	; 0x37
    1044:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1046:	6d a9       	ldd	r22, Y+53	; 0x35
    1048:	7e a9       	ldd	r23, Y+54	; 0x36
    104a:	8f a9       	ldd	r24, Y+55	; 0x37
    104c:	98 ad       	ldd	r25, Y+56	; 0x38
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	4a e7       	ldi	r20, 0x7A	; 122
    1054:	53 e4       	ldi	r21, 0x43	; 67
    1056:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	89 ab       	std	Y+49, r24	; 0x31
    1060:	9a ab       	std	Y+50, r25	; 0x32
    1062:	ab ab       	std	Y+51, r26	; 0x33
    1064:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1066:	69 a9       	ldd	r22, Y+49	; 0x31
    1068:	7a a9       	ldd	r23, Y+50	; 0x32
    106a:	8b a9       	ldd	r24, Y+51	; 0x33
    106c:	9c a9       	ldd	r25, Y+52	; 0x34
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e8       	ldi	r20, 0x80	; 128
    1074:	5f e3       	ldi	r21, 0x3F	; 63
    1076:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    107a:	88 23       	and	r24, r24
    107c:	2c f4       	brge	.+10     	; 0x1088 <LCD_sendCommand+0x84>
		__ticks = 1;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	98 ab       	std	Y+48, r25	; 0x30
    1084:	8f a7       	std	Y+47, r24	; 0x2f
    1086:	3f c0       	rjmp	.+126    	; 0x1106 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1088:	69 a9       	ldd	r22, Y+49	; 0x31
    108a:	7a a9       	ldd	r23, Y+50	; 0x32
    108c:	8b a9       	ldd	r24, Y+51	; 0x33
    108e:	9c a9       	ldd	r25, Y+52	; 0x34
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	3f ef       	ldi	r19, 0xFF	; 255
    1094:	4f e7       	ldi	r20, 0x7F	; 127
    1096:	57 e4       	ldi	r21, 0x47	; 71
    1098:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    109c:	18 16       	cp	r1, r24
    109e:	4c f5       	brge	.+82     	; 0x10f2 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a0:	6d a9       	ldd	r22, Y+53	; 0x35
    10a2:	7e a9       	ldd	r23, Y+54	; 0x36
    10a4:	8f a9       	ldd	r24, Y+55	; 0x37
    10a6:	98 ad       	ldd	r25, Y+56	; 0x38
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e2       	ldi	r20, 0x20	; 32
    10ae:	51 e4       	ldi	r21, 0x41	; 65
    10b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	98 ab       	std	Y+48, r25	; 0x30
    10c6:	8f a7       	std	Y+47, r24	; 0x2f
    10c8:	0f c0       	rjmp	.+30     	; 0x10e8 <LCD_sendCommand+0xe4>
    10ca:	89 e1       	ldi	r24, 0x19	; 25
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9e a7       	std	Y+46, r25	; 0x2e
    10d0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    10d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <LCD_sendCommand+0xd2>
    10da:	9e a7       	std	Y+46, r25	; 0x2e
    10dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10de:	8f a5       	ldd	r24, Y+47	; 0x2f
    10e0:	98 a9       	ldd	r25, Y+48	; 0x30
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	98 ab       	std	Y+48, r25	; 0x30
    10e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ea:	98 a9       	ldd	r25, Y+48	; 0x30
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	69 f7       	brne	.-38     	; 0x10ca <LCD_sendCommand+0xc6>
    10f0:	14 c0       	rjmp	.+40     	; 0x111a <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f2:	69 a9       	ldd	r22, Y+49	; 0x31
    10f4:	7a a9       	ldd	r23, Y+50	; 0x32
    10f6:	8b a9       	ldd	r24, Y+51	; 0x33
    10f8:	9c a9       	ldd	r25, Y+52	; 0x34
    10fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	98 ab       	std	Y+48, r25	; 0x30
    1104:	8f a7       	std	Y+47, r24	; 0x2f
    1106:	8f a5       	ldd	r24, Y+47	; 0x2f
    1108:	98 a9       	ldd	r25, Y+48	; 0x30
    110a:	9c a7       	std	Y+44, r25	; 0x2c
    110c:	8b a7       	std	Y+43, r24	; 0x2b
    110e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1110:	9c a5       	ldd	r25, Y+44	; 0x2c
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <LCD_sendCommand+0x10e>
    1116:	9c a7       	std	Y+44, r25	; 0x2c
    1118:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E); // Enable LCD
    111a:	a2 e3       	ldi	r26, 0x32	; 50
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e2 e3       	ldi	r30, 0x32	; 50
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 64       	ori	r24, 0x40	; 64
    1126:	8c 93       	st	X, r24
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	a0 e8       	ldi	r26, 0x80	; 128
    112e:	bf e3       	ldi	r27, 0x3F	; 63
    1130:	8f a3       	std	Y+39, r24	; 0x27
    1132:	98 a7       	std	Y+40, r25	; 0x28
    1134:	a9 a7       	std	Y+41, r26	; 0x29
    1136:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1138:	6f a1       	ldd	r22, Y+39	; 0x27
    113a:	78 a5       	ldd	r23, Y+40	; 0x28
    113c:	89 a5       	ldd	r24, Y+41	; 0x29
    113e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	4a e7       	ldi	r20, 0x7A	; 122
    1146:	53 e4       	ldi	r21, 0x43	; 67
    1148:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	8b a3       	std	Y+35, r24	; 0x23
    1152:	9c a3       	std	Y+36, r25	; 0x24
    1154:	ad a3       	std	Y+37, r26	; 0x25
    1156:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1158:	6b a1       	ldd	r22, Y+35	; 0x23
    115a:	7c a1       	ldd	r23, Y+36	; 0x24
    115c:	8d a1       	ldd	r24, Y+37	; 0x25
    115e:	9e a1       	ldd	r25, Y+38	; 0x26
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e8       	ldi	r20, 0x80	; 128
    1166:	5f e3       	ldi	r21, 0x3F	; 63
    1168:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    116c:	88 23       	and	r24, r24
    116e:	2c f4       	brge	.+10     	; 0x117a <LCD_sendCommand+0x176>
		__ticks = 1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9a a3       	std	Y+34, r25	; 0x22
    1176:	89 a3       	std	Y+33, r24	; 0x21
    1178:	3f c0       	rjmp	.+126    	; 0x11f8 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    117a:	6b a1       	ldd	r22, Y+35	; 0x23
    117c:	7c a1       	ldd	r23, Y+36	; 0x24
    117e:	8d a1       	ldd	r24, Y+37	; 0x25
    1180:	9e a1       	ldd	r25, Y+38	; 0x26
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	3f ef       	ldi	r19, 0xFF	; 255
    1186:	4f e7       	ldi	r20, 0x7F	; 127
    1188:	57 e4       	ldi	r21, 0x47	; 71
    118a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    118e:	18 16       	cp	r1, r24
    1190:	4c f5       	brge	.+82     	; 0x11e4 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1192:	6f a1       	ldd	r22, Y+39	; 0x27
    1194:	78 a5       	ldd	r23, Y+40	; 0x28
    1196:	89 a5       	ldd	r24, Y+41	; 0x29
    1198:	9a a5       	ldd	r25, Y+42	; 0x2a
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e2       	ldi	r20, 0x20	; 32
    11a0:	51 e4       	ldi	r21, 0x41	; 65
    11a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	bc 01       	movw	r22, r24
    11ac:	cd 01       	movw	r24, r26
    11ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	9a a3       	std	Y+34, r25	; 0x22
    11b8:	89 a3       	std	Y+33, r24	; 0x21
    11ba:	0f c0       	rjmp	.+30     	; 0x11da <LCD_sendCommand+0x1d6>
    11bc:	89 e1       	ldi	r24, 0x19	; 25
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	98 a3       	std	Y+32, r25	; 0x20
    11c2:	8f 8f       	std	Y+31, r24	; 0x1f
    11c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11c6:	98 a1       	ldd	r25, Y+32	; 0x20
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <LCD_sendCommand+0x1c4>
    11cc:	98 a3       	std	Y+32, r25	; 0x20
    11ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d0:	89 a1       	ldd	r24, Y+33	; 0x21
    11d2:	9a a1       	ldd	r25, Y+34	; 0x22
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	9a a3       	std	Y+34, r25	; 0x22
    11d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11da:	89 a1       	ldd	r24, Y+33	; 0x21
    11dc:	9a a1       	ldd	r25, Y+34	; 0x22
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	69 f7       	brne	.-38     	; 0x11bc <LCD_sendCommand+0x1b8>
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e4:	6b a1       	ldd	r22, Y+35	; 0x23
    11e6:	7c a1       	ldd	r23, Y+36	; 0x24
    11e8:	8d a1       	ldd	r24, Y+37	; 0x25
    11ea:	9e a1       	ldd	r25, Y+38	; 0x26
    11ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	9a a3       	std	Y+34, r25	; 0x22
    11f6:	89 a3       	std	Y+33, r24	; 0x21
    11f8:	89 a1       	ldd	r24, Y+33	; 0x21
    11fa:	9a a1       	ldd	r25, Y+34	; 0x22
    11fc:	9e 8f       	std	Y+30, r25	; 0x1e
    11fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1200:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1202:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <LCD_sendCommand+0x200>
    1208:	9e 8f       	std	Y+30, r25	; 0x1e
    120a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = command; //send CMD to DATA BUS
    120c:	e5 e3       	ldi	r30, 0x35	; 53
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	89 ad       	ldd	r24, Y+57	; 0x39
    1212:	80 83       	st	Z, r24
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a0 e8       	ldi	r26, 0x80	; 128
    121a:	bf e3       	ldi	r27, 0x3F	; 63
    121c:	89 8f       	std	Y+25, r24	; 0x19
    121e:	9a 8f       	std	Y+26, r25	; 0x1a
    1220:	ab 8f       	std	Y+27, r26	; 0x1b
    1222:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1224:	69 8d       	ldd	r22, Y+25	; 0x19
    1226:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1228:	8b 8d       	ldd	r24, Y+27	; 0x1b
    122a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	4a e7       	ldi	r20, 0x7A	; 122
    1232:	53 e4       	ldi	r21, 0x43	; 67
    1234:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	8d 8b       	std	Y+21, r24	; 0x15
    123e:	9e 8b       	std	Y+22, r25	; 0x16
    1240:	af 8b       	std	Y+23, r26	; 0x17
    1242:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1244:	6d 89       	ldd	r22, Y+21	; 0x15
    1246:	7e 89       	ldd	r23, Y+22	; 0x16
    1248:	8f 89       	ldd	r24, Y+23	; 0x17
    124a:	98 8d       	ldd	r25, Y+24	; 0x18
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1258:	88 23       	and	r24, r24
    125a:	2c f4       	brge	.+10     	; 0x1266 <LCD_sendCommand+0x262>
		__ticks = 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	9c 8b       	std	Y+20, r25	; 0x14
    1262:	8b 8b       	std	Y+19, r24	; 0x13
    1264:	3f c0       	rjmp	.+126    	; 0x12e4 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1266:	6d 89       	ldd	r22, Y+21	; 0x15
    1268:	7e 89       	ldd	r23, Y+22	; 0x16
    126a:	8f 89       	ldd	r24, Y+23	; 0x17
    126c:	98 8d       	ldd	r25, Y+24	; 0x18
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	3f ef       	ldi	r19, 0xFF	; 255
    1272:	4f e7       	ldi	r20, 0x7F	; 127
    1274:	57 e4       	ldi	r21, 0x47	; 71
    1276:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    127a:	18 16       	cp	r1, r24
    127c:	4c f5       	brge	.+82     	; 0x12d0 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127e:	69 8d       	ldd	r22, Y+25	; 0x19
    1280:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e2       	ldi	r20, 0x20	; 32
    128c:	51 e4       	ldi	r21, 0x41	; 65
    128e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	bc 01       	movw	r22, r24
    1298:	cd 01       	movw	r24, r26
    129a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	9c 8b       	std	Y+20, r25	; 0x14
    12a4:	8b 8b       	std	Y+19, r24	; 0x13
    12a6:	0f c0       	rjmp	.+30     	; 0x12c6 <LCD_sendCommand+0x2c2>
    12a8:	89 e1       	ldi	r24, 0x19	; 25
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	9a 8b       	std	Y+18, r25	; 0x12
    12ae:	89 8b       	std	Y+17, r24	; 0x11
    12b0:	89 89       	ldd	r24, Y+17	; 0x11
    12b2:	9a 89       	ldd	r25, Y+18	; 0x12
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <LCD_sendCommand+0x2b0>
    12b8:	9a 8b       	std	Y+18, r25	; 0x12
    12ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12bc:	8b 89       	ldd	r24, Y+19	; 0x13
    12be:	9c 89       	ldd	r25, Y+20	; 0x14
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	9c 8b       	std	Y+20, r25	; 0x14
    12c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c6:	8b 89       	ldd	r24, Y+19	; 0x13
    12c8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	69 f7       	brne	.-38     	; 0x12a8 <LCD_sendCommand+0x2a4>
    12ce:	14 c0       	rjmp	.+40     	; 0x12f8 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d0:	6d 89       	ldd	r22, Y+21	; 0x15
    12d2:	7e 89       	ldd	r23, Y+22	; 0x16
    12d4:	8f 89       	ldd	r24, Y+23	; 0x17
    12d6:	98 8d       	ldd	r25, Y+24	; 0x18
    12d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	9c 8b       	std	Y+20, r25	; 0x14
    12e2:	8b 8b       	std	Y+19, r24	; 0x13
    12e4:	8b 89       	ldd	r24, Y+19	; 0x13
    12e6:	9c 89       	ldd	r25, Y+20	; 0x14
    12e8:	98 8b       	std	Y+16, r25	; 0x10
    12ea:	8f 87       	std	Y+15, r24	; 0x0f
    12ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ee:	98 89       	ldd	r25, Y+16	; 0x10
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <LCD_sendCommand+0x2ec>
    12f4:	98 8b       	std	Y+16, r25	; 0x10
    12f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E); //disable LCD
    12f8:	a2 e3       	ldi	r26, 0x32	; 50
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e2 e3       	ldi	r30, 0x32	; 50
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8f 7b       	andi	r24, 0xBF	; 191
    1304:	8c 93       	st	X, r24
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e8       	ldi	r26, 0x80	; 128
    130c:	bf e3       	ldi	r27, 0x3F	; 63
    130e:	8b 87       	std	Y+11, r24	; 0x0b
    1310:	9c 87       	std	Y+12, r25	; 0x0c
    1312:	ad 87       	std	Y+13, r26	; 0x0d
    1314:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1316:	6b 85       	ldd	r22, Y+11	; 0x0b
    1318:	7c 85       	ldd	r23, Y+12	; 0x0c
    131a:	8d 85       	ldd	r24, Y+13	; 0x0d
    131c:	9e 85       	ldd	r25, Y+14	; 0x0e
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	4a e7       	ldi	r20, 0x7A	; 122
    1324:	53 e4       	ldi	r21, 0x43	; 67
    1326:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	8f 83       	std	Y+7, r24	; 0x07
    1330:	98 87       	std	Y+8, r25	; 0x08
    1332:	a9 87       	std	Y+9, r26	; 0x09
    1334:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1336:	6f 81       	ldd	r22, Y+7	; 0x07
    1338:	78 85       	ldd	r23, Y+8	; 0x08
    133a:	89 85       	ldd	r24, Y+9	; 0x09
    133c:	9a 85       	ldd	r25, Y+10	; 0x0a
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e8       	ldi	r20, 0x80	; 128
    1344:	5f e3       	ldi	r21, 0x3F	; 63
    1346:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    134a:	88 23       	and	r24, r24
    134c:	2c f4       	brge	.+10     	; 0x1358 <LCD_sendCommand+0x354>
		__ticks = 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	9e 83       	std	Y+6, r25	; 0x06
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	3f c0       	rjmp	.+126    	; 0x13d6 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1358:	6f 81       	ldd	r22, Y+7	; 0x07
    135a:	78 85       	ldd	r23, Y+8	; 0x08
    135c:	89 85       	ldd	r24, Y+9	; 0x09
    135e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	3f ef       	ldi	r19, 0xFF	; 255
    1364:	4f e7       	ldi	r20, 0x7F	; 127
    1366:	57 e4       	ldi	r21, 0x47	; 71
    1368:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    136c:	18 16       	cp	r1, r24
    136e:	4c f5       	brge	.+82     	; 0x13c2 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1370:	6b 85       	ldd	r22, Y+11	; 0x0b
    1372:	7c 85       	ldd	r23, Y+12	; 0x0c
    1374:	8d 85       	ldd	r24, Y+13	; 0x0d
    1376:	9e 85       	ldd	r25, Y+14	; 0x0e
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e2       	ldi	r20, 0x20	; 32
    137e:	51 e4       	ldi	r21, 0x41	; 65
    1380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	9e 83       	std	Y+6, r25	; 0x06
    1396:	8d 83       	std	Y+5, r24	; 0x05
    1398:	0f c0       	rjmp	.+30     	; 0x13b8 <LCD_sendCommand+0x3b4>
    139a:	89 e1       	ldi	r24, 0x19	; 25
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9c 83       	std	Y+4, r25	; 0x04
    13a0:	8b 83       	std	Y+3, r24	; 0x03
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <LCD_sendCommand+0x3a2>
    13aa:	9c 83       	std	Y+4, r25	; 0x04
    13ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ae:	8d 81       	ldd	r24, Y+5	; 0x05
    13b0:	9e 81       	ldd	r25, Y+6	; 0x06
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	69 f7       	brne	.-38     	; 0x139a <LCD_sendCommand+0x396>
    13c0:	14 c0       	rjmp	.+40     	; 0x13ea <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c2:	6f 81       	ldd	r22, Y+7	; 0x07
    13c4:	78 85       	ldd	r23, Y+8	; 0x08
    13c6:	89 85       	ldd	r24, Y+9	; 0x09
    13c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	9e 83       	std	Y+6, r25	; 0x06
    13d4:	8d 83       	std	Y+5, r24	; 0x05
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <LCD_sendCommand+0x3de>
    13e6:	9a 83       	std	Y+2, r25	; 0x02
    13e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    13ea:	e9 96       	adiw	r28, 0x39	; 57
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <LCD_displayChar>:
void LCD_displayChar(uint8 data) {
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	e9 97       	sbiw	r28, 0x39	; 57
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT, RS); //Data select
    1412:	a2 e3       	ldi	r26, 0x32	; 50
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e2 e3       	ldi	r30, 0x32	; 50
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	80 61       	ori	r24, 0x10	; 16
    141e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW); //Write on LCD
    1420:	a2 e3       	ldi	r26, 0x32	; 50
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e2 e3       	ldi	r30, 0x32	; 50
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	8f 7d       	andi	r24, 0xDF	; 223
    142c:	8c 93       	st	X, r24
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a0 e8       	ldi	r26, 0x80	; 128
    1434:	bf e3       	ldi	r27, 0x3F	; 63
    1436:	8d ab       	std	Y+53, r24	; 0x35
    1438:	9e ab       	std	Y+54, r25	; 0x36
    143a:	af ab       	std	Y+55, r26	; 0x37
    143c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143e:	6d a9       	ldd	r22, Y+53	; 0x35
    1440:	7e a9       	ldd	r23, Y+54	; 0x36
    1442:	8f a9       	ldd	r24, Y+55	; 0x37
    1444:	98 ad       	ldd	r25, Y+56	; 0x38
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4a e7       	ldi	r20, 0x7A	; 122
    144c:	53 e4       	ldi	r21, 0x43	; 67
    144e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	89 ab       	std	Y+49, r24	; 0x31
    1458:	9a ab       	std	Y+50, r25	; 0x32
    145a:	ab ab       	std	Y+51, r26	; 0x33
    145c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    145e:	69 a9       	ldd	r22, Y+49	; 0x31
    1460:	7a a9       	ldd	r23, Y+50	; 0x32
    1462:	8b a9       	ldd	r24, Y+51	; 0x33
    1464:	9c a9       	ldd	r25, Y+52	; 0x34
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e8       	ldi	r20, 0x80	; 128
    146c:	5f e3       	ldi	r21, 0x3F	; 63
    146e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1472:	88 23       	and	r24, r24
    1474:	2c f4       	brge	.+10     	; 0x1480 <LCD_displayChar+0x84>
		__ticks = 1;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	98 ab       	std	Y+48, r25	; 0x30
    147c:	8f a7       	std	Y+47, r24	; 0x2f
    147e:	3f c0       	rjmp	.+126    	; 0x14fe <LCD_displayChar+0x102>
	else if (__tmp > 65535)
    1480:	69 a9       	ldd	r22, Y+49	; 0x31
    1482:	7a a9       	ldd	r23, Y+50	; 0x32
    1484:	8b a9       	ldd	r24, Y+51	; 0x33
    1486:	9c a9       	ldd	r25, Y+52	; 0x34
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	3f ef       	ldi	r19, 0xFF	; 255
    148c:	4f e7       	ldi	r20, 0x7F	; 127
    148e:	57 e4       	ldi	r21, 0x47	; 71
    1490:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1494:	18 16       	cp	r1, r24
    1496:	4c f5       	brge	.+82     	; 0x14ea <LCD_displayChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1498:	6d a9       	ldd	r22, Y+53	; 0x35
    149a:	7e a9       	ldd	r23, Y+54	; 0x36
    149c:	8f a9       	ldd	r24, Y+55	; 0x37
    149e:	98 ad       	ldd	r25, Y+56	; 0x38
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e2       	ldi	r20, 0x20	; 32
    14a6:	51 e4       	ldi	r21, 0x41	; 65
    14a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	98 ab       	std	Y+48, r25	; 0x30
    14be:	8f a7       	std	Y+47, r24	; 0x2f
    14c0:	0f c0       	rjmp	.+30     	; 0x14e0 <LCD_displayChar+0xe4>
    14c2:	89 e1       	ldi	r24, 0x19	; 25
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	9e a7       	std	Y+46, r25	; 0x2e
    14c8:	8d a7       	std	Y+45, r24	; 0x2d
    14ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    14cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <LCD_displayChar+0xd2>
    14d2:	9e a7       	std	Y+46, r25	; 0x2e
    14d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    14d8:	98 a9       	ldd	r25, Y+48	; 0x30
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	98 ab       	std	Y+48, r25	; 0x30
    14de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e2:	98 a9       	ldd	r25, Y+48	; 0x30
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	69 f7       	brne	.-38     	; 0x14c2 <LCD_displayChar+0xc6>
    14e8:	14 c0       	rjmp	.+40     	; 0x1512 <LCD_displayChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ea:	69 a9       	ldd	r22, Y+49	; 0x31
    14ec:	7a a9       	ldd	r23, Y+50	; 0x32
    14ee:	8b a9       	ldd	r24, Y+51	; 0x33
    14f0:	9c a9       	ldd	r25, Y+52	; 0x34
    14f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	98 ab       	std	Y+48, r25	; 0x30
    14fc:	8f a7       	std	Y+47, r24	; 0x2f
    14fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1500:	98 a9       	ldd	r25, Y+48	; 0x30
    1502:	9c a7       	std	Y+44, r25	; 0x2c
    1504:	8b a7       	std	Y+43, r24	; 0x2b
    1506:	8b a5       	ldd	r24, Y+43	; 0x2b
    1508:	9c a5       	ldd	r25, Y+44	; 0x2c
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <LCD_displayChar+0x10e>
    150e:	9c a7       	std	Y+44, r25	; 0x2c
    1510:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E); // Enable LCD
    1512:	a2 e3       	ldi	r26, 0x32	; 50
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e2 e3       	ldi	r30, 0x32	; 50
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	80 64       	ori	r24, 0x40	; 64
    151e:	8c 93       	st	X, r24
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a0 e8       	ldi	r26, 0x80	; 128
    1526:	bf e3       	ldi	r27, 0x3F	; 63
    1528:	8f a3       	std	Y+39, r24	; 0x27
    152a:	98 a7       	std	Y+40, r25	; 0x28
    152c:	a9 a7       	std	Y+41, r26	; 0x29
    152e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1530:	6f a1       	ldd	r22, Y+39	; 0x27
    1532:	78 a5       	ldd	r23, Y+40	; 0x28
    1534:	89 a5       	ldd	r24, Y+41	; 0x29
    1536:	9a a5       	ldd	r25, Y+42	; 0x2a
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	4a e7       	ldi	r20, 0x7A	; 122
    153e:	53 e4       	ldi	r21, 0x43	; 67
    1540:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	8b a3       	std	Y+35, r24	; 0x23
    154a:	9c a3       	std	Y+36, r25	; 0x24
    154c:	ad a3       	std	Y+37, r26	; 0x25
    154e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1550:	6b a1       	ldd	r22, Y+35	; 0x23
    1552:	7c a1       	ldd	r23, Y+36	; 0x24
    1554:	8d a1       	ldd	r24, Y+37	; 0x25
    1556:	9e a1       	ldd	r25, Y+38	; 0x26
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1564:	88 23       	and	r24, r24
    1566:	2c f4       	brge	.+10     	; 0x1572 <LCD_displayChar+0x176>
		__ticks = 1;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9a a3       	std	Y+34, r25	; 0x22
    156e:	89 a3       	std	Y+33, r24	; 0x21
    1570:	3f c0       	rjmp	.+126    	; 0x15f0 <LCD_displayChar+0x1f4>
	else if (__tmp > 65535)
    1572:	6b a1       	ldd	r22, Y+35	; 0x23
    1574:	7c a1       	ldd	r23, Y+36	; 0x24
    1576:	8d a1       	ldd	r24, Y+37	; 0x25
    1578:	9e a1       	ldd	r25, Y+38	; 0x26
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	3f ef       	ldi	r19, 0xFF	; 255
    157e:	4f e7       	ldi	r20, 0x7F	; 127
    1580:	57 e4       	ldi	r21, 0x47	; 71
    1582:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1586:	18 16       	cp	r1, r24
    1588:	4c f5       	brge	.+82     	; 0x15dc <LCD_displayChar+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158a:	6f a1       	ldd	r22, Y+39	; 0x27
    158c:	78 a5       	ldd	r23, Y+40	; 0x28
    158e:	89 a5       	ldd	r24, Y+41	; 0x29
    1590:	9a a5       	ldd	r25, Y+42	; 0x2a
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e2       	ldi	r20, 0x20	; 32
    1598:	51 e4       	ldi	r21, 0x41	; 65
    159a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	bc 01       	movw	r22, r24
    15a4:	cd 01       	movw	r24, r26
    15a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9a a3       	std	Y+34, r25	; 0x22
    15b0:	89 a3       	std	Y+33, r24	; 0x21
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <LCD_displayChar+0x1d6>
    15b4:	89 e1       	ldi	r24, 0x19	; 25
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	98 a3       	std	Y+32, r25	; 0x20
    15ba:	8f 8f       	std	Y+31, r24	; 0x1f
    15bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15be:	98 a1       	ldd	r25, Y+32	; 0x20
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <LCD_displayChar+0x1c4>
    15c4:	98 a3       	std	Y+32, r25	; 0x20
    15c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ca:	9a a1       	ldd	r25, Y+34	; 0x22
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	9a a3       	std	Y+34, r25	; 0x22
    15d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d2:	89 a1       	ldd	r24, Y+33	; 0x21
    15d4:	9a a1       	ldd	r25, Y+34	; 0x22
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	69 f7       	brne	.-38     	; 0x15b4 <LCD_displayChar+0x1b8>
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <LCD_displayChar+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15dc:	6b a1       	ldd	r22, Y+35	; 0x23
    15de:	7c a1       	ldd	r23, Y+36	; 0x24
    15e0:	8d a1       	ldd	r24, Y+37	; 0x25
    15e2:	9e a1       	ldd	r25, Y+38	; 0x26
    15e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9a a3       	std	Y+34, r25	; 0x22
    15ee:	89 a3       	std	Y+33, r24	; 0x21
    15f0:	89 a1       	ldd	r24, Y+33	; 0x21
    15f2:	9a a1       	ldd	r25, Y+34	; 0x22
    15f4:	9e 8f       	std	Y+30, r25	; 0x1e
    15f6:	8d 8f       	std	Y+29, r24	; 0x1d
    15f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <LCD_displayChar+0x200>
    1600:	9e 8f       	std	Y+30, r25	; 0x1e
    1602:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = data; //send DATA to DATA BUS
    1604:	e5 e3       	ldi	r30, 0x35	; 53
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	89 ad       	ldd	r24, Y+57	; 0x39
    160a:	80 83       	st	Z, r24
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	a0 e8       	ldi	r26, 0x80	; 128
    1612:	bf e3       	ldi	r27, 0x3F	; 63
    1614:	89 8f       	std	Y+25, r24	; 0x19
    1616:	9a 8f       	std	Y+26, r25	; 0x1a
    1618:	ab 8f       	std	Y+27, r26	; 0x1b
    161a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161c:	69 8d       	ldd	r22, Y+25	; 0x19
    161e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1620:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1622:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	4a e7       	ldi	r20, 0x7A	; 122
    162a:	53 e4       	ldi	r21, 0x43	; 67
    162c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	8d 8b       	std	Y+21, r24	; 0x15
    1636:	9e 8b       	std	Y+22, r25	; 0x16
    1638:	af 8b       	std	Y+23, r26	; 0x17
    163a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    163c:	6d 89       	ldd	r22, Y+21	; 0x15
    163e:	7e 89       	ldd	r23, Y+22	; 0x16
    1640:	8f 89       	ldd	r24, Y+23	; 0x17
    1642:	98 8d       	ldd	r25, Y+24	; 0x18
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e8       	ldi	r20, 0x80	; 128
    164a:	5f e3       	ldi	r21, 0x3F	; 63
    164c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1650:	88 23       	and	r24, r24
    1652:	2c f4       	brge	.+10     	; 0x165e <LCD_displayChar+0x262>
		__ticks = 1;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9c 8b       	std	Y+20, r25	; 0x14
    165a:	8b 8b       	std	Y+19, r24	; 0x13
    165c:	3f c0       	rjmp	.+126    	; 0x16dc <LCD_displayChar+0x2e0>
	else if (__tmp > 65535)
    165e:	6d 89       	ldd	r22, Y+21	; 0x15
    1660:	7e 89       	ldd	r23, Y+22	; 0x16
    1662:	8f 89       	ldd	r24, Y+23	; 0x17
    1664:	98 8d       	ldd	r25, Y+24	; 0x18
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	3f ef       	ldi	r19, 0xFF	; 255
    166a:	4f e7       	ldi	r20, 0x7F	; 127
    166c:	57 e4       	ldi	r21, 0x47	; 71
    166e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1672:	18 16       	cp	r1, r24
    1674:	4c f5       	brge	.+82     	; 0x16c8 <LCD_displayChar+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1676:	69 8d       	ldd	r22, Y+25	; 0x19
    1678:	7a 8d       	ldd	r23, Y+26	; 0x1a
    167a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    167c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e2       	ldi	r20, 0x20	; 32
    1684:	51 e4       	ldi	r21, 0x41	; 65
    1686:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	9c 8b       	std	Y+20, r25	; 0x14
    169c:	8b 8b       	std	Y+19, r24	; 0x13
    169e:	0f c0       	rjmp	.+30     	; 0x16be <LCD_displayChar+0x2c2>
    16a0:	89 e1       	ldi	r24, 0x19	; 25
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9a 8b       	std	Y+18, r25	; 0x12
    16a6:	89 8b       	std	Y+17, r24	; 0x11
    16a8:	89 89       	ldd	r24, Y+17	; 0x11
    16aa:	9a 89       	ldd	r25, Y+18	; 0x12
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <LCD_displayChar+0x2b0>
    16b0:	9a 8b       	std	Y+18, r25	; 0x12
    16b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b4:	8b 89       	ldd	r24, Y+19	; 0x13
    16b6:	9c 89       	ldd	r25, Y+20	; 0x14
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	9c 8b       	std	Y+20, r25	; 0x14
    16bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16be:	8b 89       	ldd	r24, Y+19	; 0x13
    16c0:	9c 89       	ldd	r25, Y+20	; 0x14
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	69 f7       	brne	.-38     	; 0x16a0 <LCD_displayChar+0x2a4>
    16c6:	14 c0       	rjmp	.+40     	; 0x16f0 <LCD_displayChar+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ca:	7e 89       	ldd	r23, Y+22	; 0x16
    16cc:	8f 89       	ldd	r24, Y+23	; 0x17
    16ce:	98 8d       	ldd	r25, Y+24	; 0x18
    16d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	9c 8b       	std	Y+20, r25	; 0x14
    16da:	8b 8b       	std	Y+19, r24	; 0x13
    16dc:	8b 89       	ldd	r24, Y+19	; 0x13
    16de:	9c 89       	ldd	r25, Y+20	; 0x14
    16e0:	98 8b       	std	Y+16, r25	; 0x10
    16e2:	8f 87       	std	Y+15, r24	; 0x0f
    16e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e6:	98 89       	ldd	r25, Y+16	; 0x10
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <LCD_displayChar+0x2ec>
    16ec:	98 8b       	std	Y+16, r25	; 0x10
    16ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E); //Disable LCD
    16f0:	a2 e3       	ldi	r26, 0x32	; 50
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e2 e3       	ldi	r30, 0x32	; 50
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8f 7b       	andi	r24, 0xBF	; 191
    16fc:	8c 93       	st	X, r24
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e8       	ldi	r26, 0x80	; 128
    1704:	bf e3       	ldi	r27, 0x3F	; 63
    1706:	8b 87       	std	Y+11, r24	; 0x0b
    1708:	9c 87       	std	Y+12, r25	; 0x0c
    170a:	ad 87       	std	Y+13, r26	; 0x0d
    170c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1710:	7c 85       	ldd	r23, Y+12	; 0x0c
    1712:	8d 85       	ldd	r24, Y+13	; 0x0d
    1714:	9e 85       	ldd	r25, Y+14	; 0x0e
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4a e7       	ldi	r20, 0x7A	; 122
    171c:	53 e4       	ldi	r21, 0x43	; 67
    171e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	8f 83       	std	Y+7, r24	; 0x07
    1728:	98 87       	std	Y+8, r25	; 0x08
    172a:	a9 87       	std	Y+9, r26	; 0x09
    172c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    172e:	6f 81       	ldd	r22, Y+7	; 0x07
    1730:	78 85       	ldd	r23, Y+8	; 0x08
    1732:	89 85       	ldd	r24, Y+9	; 0x09
    1734:	9a 85       	ldd	r25, Y+10	; 0x0a
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	5f e3       	ldi	r21, 0x3F	; 63
    173e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1742:	88 23       	and	r24, r24
    1744:	2c f4       	brge	.+10     	; 0x1750 <LCD_displayChar+0x354>
		__ticks = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
    174e:	3f c0       	rjmp	.+126    	; 0x17ce <LCD_displayChar+0x3d2>
	else if (__tmp > 65535)
    1750:	6f 81       	ldd	r22, Y+7	; 0x07
    1752:	78 85       	ldd	r23, Y+8	; 0x08
    1754:	89 85       	ldd	r24, Y+9	; 0x09
    1756:	9a 85       	ldd	r25, Y+10	; 0x0a
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	3f ef       	ldi	r19, 0xFF	; 255
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	57 e4       	ldi	r21, 0x47	; 71
    1760:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1764:	18 16       	cp	r1, r24
    1766:	4c f5       	brge	.+82     	; 0x17ba <LCD_displayChar+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1768:	6b 85       	ldd	r22, Y+11	; 0x0b
    176a:	7c 85       	ldd	r23, Y+12	; 0x0c
    176c:	8d 85       	ldd	r24, Y+13	; 0x0d
    176e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	51 e4       	ldi	r21, 0x41	; 65
    1778:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9e 83       	std	Y+6, r25	; 0x06
    178e:	8d 83       	std	Y+5, r24	; 0x05
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <LCD_displayChar+0x3b4>
    1792:	89 e1       	ldi	r24, 0x19	; 25
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9c 83       	std	Y+4, r25	; 0x04
    1798:	8b 83       	std	Y+3, r24	; 0x03
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <LCD_displayChar+0x3a2>
    17a2:	9c 83       	std	Y+4, r25	; 0x04
    17a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	9e 83       	std	Y+6, r25	; 0x06
    17ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b0:	8d 81       	ldd	r24, Y+5	; 0x05
    17b2:	9e 81       	ldd	r25, Y+6	; 0x06
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	69 f7       	brne	.-38     	; 0x1792 <LCD_displayChar+0x396>
    17b8:	14 c0       	rjmp	.+40     	; 0x17e2 <LCD_displayChar+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ba:	6f 81       	ldd	r22, Y+7	; 0x07
    17bc:	78 85       	ldd	r23, Y+8	; 0x08
    17be:	89 85       	ldd	r24, Y+9	; 0x09
    17c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9e 83       	std	Y+6, r25	; 0x06
    17cc:	8d 83       	std	Y+5, r24	; 0x05
    17ce:	8d 81       	ldd	r24, Y+5	; 0x05
    17d0:	9e 81       	ldd	r25, Y+6	; 0x06
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD_displayChar+0x3de>
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    17e2:	e9 96       	adiw	r28, 0x39	; 57
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <LCD_init>:

void LCD_init(void){
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; // configure data port as output port
    17fc:	e5 e3       	ldi	r30, 0x35	; 53
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1 << RS) | (1 << RW) | (1 << E); // configure Control pins
    1804:	a1 e3       	ldi	r26, 0x31	; 49
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e1 e3       	ldi	r30, 0x31	; 49
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	80 67       	ori	r24, 0x70	; 112
    1810:	8c 93       	st	X, r24
	LCD_sendCommand(TWO_LINE_LCD_EIGHT_BIT_MODE); //use 2-line lcd, 8-bit mode, 5*7 dots
    1812:	88 e3       	ldi	r24, 0x38	; 56
    1814:	0e 94 02 08 	call	0x1004	; 0x1004 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF); // cursor off
    1818:	8c e0       	ldi	r24, 0x0C	; 12
    181a:	0e 94 02 08 	call	0x1004	; 0x1004 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_CMD); // clear LCD
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	0e 94 02 08 	call	0x1004	; 0x1004 <LCD_sendCommand>
}
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <LCD_displayString>:
//Display String in LCD
void LCD_displayString(uint8 *Str) {
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <LCD_displayString+0x6>
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	0a c0       	rjmp	.+20     	; 0x184e <LCD_displayString+0x24>
	while ((*Str) != '\0') {
		LCD_displayChar(*Str);
    183a:	e9 81       	ldd	r30, Y+1	; 0x01
    183c:	fa 81       	ldd	r31, Y+2	; 0x02
    183e:	80 81       	ld	r24, Z
    1840:	0e 94 fe 09 	call	0x13fc	; 0x13fc <LCD_displayChar>
		Str++;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(CURSOR_OFF); // cursor off
	LCD_sendCommand(CLEAR_CMD); // clear LCD
}
//Display String in LCD
void LCD_displayString(uint8 *Str) {
	while ((*Str) != '\0') {
    184e:	e9 81       	ldd	r30, Y+1	; 0x01
    1850:	fa 81       	ldd	r31, Y+2	; 0x02
    1852:	80 81       	ld	r24, Z
    1854:	88 23       	and	r24, r24
    1856:	89 f7       	brne	.-30     	; 0x183a <LCD_displayString+0x10>
		LCD_displayChar(*Str);
		Str++;
	}
}
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <LCD_goToRowCol>:

void LCD_goToRowCol(uint8 row, uint8 col) {
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <LCD_goToRowCol+0x6>
    1868:	00 d0       	rcall	.+0      	; 0x186a <LCD_goToRowCol+0x8>
    186a:	0f 92       	push	r0
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	8a 83       	std	Y+2, r24	; 0x02
    1872:	6b 83       	std	Y+3, r22	; 0x03
	// calculate the required address location
	uint8 address;
	switch (row) {
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	3d 83       	std	Y+5, r19	; 0x05
    187c:	2c 83       	std	Y+4, r18	; 0x04
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9d 81       	ldd	r25, Y+5	; 0x05
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	91 05       	cpc	r25, r1
    1886:	c1 f0       	breq	.+48     	; 0x18b8 <LCD_goToRowCol+0x56>
    1888:	2c 81       	ldd	r18, Y+4	; 0x04
    188a:	3d 81       	ldd	r19, Y+5	; 0x05
    188c:	22 30       	cpi	r18, 0x02	; 2
    188e:	31 05       	cpc	r19, r1
    1890:	2c f4       	brge	.+10     	; 0x189c <LCD_goToRowCol+0x3a>
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	9d 81       	ldd	r25, Y+5	; 0x05
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	61 f0       	breq	.+24     	; 0x18b2 <LCD_goToRowCol+0x50>
    189a:	19 c0       	rjmp	.+50     	; 0x18ce <LCD_goToRowCol+0x6c>
    189c:	2c 81       	ldd	r18, Y+4	; 0x04
    189e:	3d 81       	ldd	r19, Y+5	; 0x05
    18a0:	22 30       	cpi	r18, 0x02	; 2
    18a2:	31 05       	cpc	r19, r1
    18a4:	69 f0       	breq	.+26     	; 0x18c0 <LCD_goToRowCol+0x5e>
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	9d 81       	ldd	r25, Y+5	; 0x05
    18aa:	83 30       	cpi	r24, 0x03	; 3
    18ac:	91 05       	cpc	r25, r1
    18ae:	61 f0       	breq	.+24     	; 0x18c8 <LCD_goToRowCol+0x66>
    18b0:	0e c0       	rjmp	.+28     	; 0x18ce <LCD_goToRowCol+0x6c>
	case 0:
		address = col; //first row
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	0b c0       	rjmp	.+22     	; 0x18ce <LCD_goToRowCol+0x6c>
		break;
	case 1:
		address = col + 0x40; //second row
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	80 5c       	subi	r24, 0xC0	; 192
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	07 c0       	rjmp	.+14     	; 0x18ce <LCD_goToRowCol+0x6c>
		break;
	case 2:
		address = col + 0x10; //third row
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	80 5f       	subi	r24, 0xF0	; 240
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <LCD_goToRowCol+0x6c>
		break;
	case 3:
		address = col + 0x41; // fourth row
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	8f 5b       	subi	r24, 0xBF	; 191
    18cc:	89 83       	std	Y+1, r24	; 0x01
		break;
	//write in a specific address in LCD
	LCD_sendCommand(address + SET_CURSOR_LOCATION);
	}
}
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <LCD_displayStringRowCol>:
// display a string in a specific address
void LCD_displayStringRowCol(uint8 *Str , uint8 row, uint8 col){
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <LCD_displayStringRowCol+0x6>
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <LCD_displayStringRowCol+0x8>
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	9a 83       	std	Y+2, r25	; 0x02
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	6b 83       	std	Y+3, r22	; 0x03
    18f0:	4c 83       	std	Y+4, r20	; 0x04
	LCD_goToRowCol(row,col);
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	6c 81       	ldd	r22, Y+4	; 0x04
    18f6:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_goToRowCol>
	LCD_displayString(Str);
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	0e 94 15 0c 	call	0x182a	; 0x182a <LCD_displayString>
}
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <LCD_integerToString>:
//display integer
void LCD_integerToString(int data){
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	62 97       	sbiw	r28, 0x12	; 18
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	9a 8b       	std	Y+18, r25	; 0x12
    1926:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buff[16]; // string holds ASCII result
	itoa(data,buff,10);
    1928:	89 89       	ldd	r24, Y+17	; 0x11
    192a:	9a 89       	ldd	r25, Y+18	; 0x12
    192c:	9e 01       	movw	r18, r28
    192e:	2f 5f       	subi	r18, 0xFF	; 255
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	b9 01       	movw	r22, r18
    1934:	4a e0       	ldi	r20, 0x0A	; 10
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <itoa>
	LCD_displayString(buff);
    193c:	ce 01       	movw	r24, r28
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	0e 94 15 0c 	call	0x182a	; 0x182a <LCD_displayString>
}
    1944:	62 96       	adiw	r28, 0x12	; 18
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <LCD_clearScreen>:
//clear screen
void LCD_clearScreen(void){
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_CMD);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	0e 94 02 08 	call	0x1004	; 0x1004 <LCD_sendCommand>
}
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <main>:
 */


#include "spi.h"

int main(){
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0


}
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <SPI_initMaster>:
 *      Author: Amr Ramadan
 */

#include "spi.h"

void SPI_initMaster(enum SCK_Frequency SCK) {
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	0f 92       	push	r0
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	89 83       	std	Y+1, r24	; 0x01

	DDRB |= (1 << PB4); 	//SS Output
    1988:	a7 e3       	ldi	r26, 0x37	; 55
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e7 e3       	ldi	r30, 0x37	; 55
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 61       	ori	r24, 0x10	; 16
    1994:	8c 93       	st	X, r24
	DDRB |= (1 << PB5);	 	//MOSI Output
    1996:	a7 e3       	ldi	r26, 0x37	; 55
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e7 e3       	ldi	r30, 0x37	; 55
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	80 62       	ori	r24, 0x20	; 32
    19a2:	8c 93       	st	X, r24
	DDRB &= (~(1 << PB6));	//MISO Input
    19a4:	a7 e3       	ldi	r26, 0x37	; 55
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e7 e3       	ldi	r30, 0x37	; 55
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 7b       	andi	r24, 0xBF	; 191
    19b0:	8c 93       	st	X, r24
	DDRB |= (1 << PB7); 	//SCK Output
    19b2:	a7 e3       	ldi	r26, 0x37	; 55
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e7 e3       	ldi	r30, 0x37	; 55
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	80 68       	ori	r24, 0x80	; 128
    19be:	8c 93       	st	X, r24
	/*
	 * SPE =1 : Enable SPE
	 * MSTR=1 : Master Configuration
	 * SPR1:0 = User Configure
	 */
	SPCR = (1 << SPE) | (1 << MSTR) | (SCK & 0x03);
    19c0:	ed e2       	ldi	r30, 0x2D	; 45
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	83 70       	andi	r24, 0x03	; 3
    19c8:	80 65       	ori	r24, 0x50	; 80
    19ca:	80 83       	st	Z, r24

}
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <SPI_initSlave>:

void SPI_initSlave(void) {
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	DDRB &= (~(1 << PB4));	//SS Input
    19dc:	a7 e3       	ldi	r26, 0x37	; 55
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e7 e3       	ldi	r30, 0x37	; 55
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	8f 7e       	andi	r24, 0xEF	; 239
    19e8:	8c 93       	st	X, r24
	DDRB &= (~(1 << PB5));	//MISO Input
    19ea:	a7 e3       	ldi	r26, 0x37	; 55
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e7 e3       	ldi	r30, 0x37	; 55
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	8f 7d       	andi	r24, 0xDF	; 223
    19f6:	8c 93       	st	X, r24
	DDRB |= (1 << PB6);	 	//MOSI Output
    19f8:	a7 e3       	ldi	r26, 0x37	; 55
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e7 e3       	ldi	r30, 0x37	; 55
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	80 64       	ori	r24, 0x40	; 64
    1a04:	8c 93       	st	X, r24
	DDRB &= (~(1 << PB7));	//SCK Input
    1a06:	a7 e3       	ldi	r26, 0x37	; 55
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e7 e3       	ldi	r30, 0x37	; 55
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	8f 77       	andi	r24, 0x7F	; 127
    1a12:	8c 93       	st	X, r24

	/*
	 * SPE =1 : Enable SPE
	 * Slave Configuration
	 */
	SPCR = (1 << SPE);
    1a14:	ed e2       	ldi	r30, 0x2D	; 45
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 e4       	ldi	r24, 0x40	; 64
    1a1a:	80 83       	st	Z, r24
}
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <SPI_sendByte>:

void SPI_sendByte(uint8 Data){
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	0f 92       	push	r0
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Data; //Send Data to SPI
    1a2e:	ef e2       	ldi	r30, 0x2F	; 47
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	80 83       	st	Z, r24
	/* wait until data sent ( flag =1 )*/
	while(BIT_IS_CLEAR(SPSR,SPIF));
    1a36:	ee e2       	ldi	r30, 0x2E	; 46
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	88 23       	and	r24, r24
    1a3e:	dc f7       	brge	.-10     	; 0x1a36 <SPI_sendByte+0x14>
}
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <SPI_receiveByte>:

uint8 SPI_receiveByte(void)
{	/* wait until data received ( flag = 1 )*/
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(SPSR,SPIF));
    1a50:	ee e2       	ldi	r30, 0x2E	; 46
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	88 23       	and	r24, r24
    1a58:	dc f7       	brge	.-10     	; 0x1a50 <SPI_receiveByte+0x8>
	return SPDR; //return data
    1a5a:	ef e2       	ldi	r30, 0x2F	; 47
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
}
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <SPI_sendString>:

void SPI_sendString(uint8 *Ptr) {
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <SPI_sendString+0x6>
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	9a 83       	std	Y+2, r25	; 0x02
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	0a c0       	rjmp	.+20     	; 0x1a8a <SPI_sendString+0x24>
	while (*Ptr != "\0") {
		SPI_sendByte(*Ptr);
    1a76:	e9 81       	ldd	r30, Y+1	; 0x01
    1a78:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7a:	80 81       	ld	r24, Z
    1a7c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <SPI_sendByte>
		Ptr++;
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	9a 83       	std	Y+2, r25	; 0x02
    1a88:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(SPSR,SPIF));
	return SPDR; //return data
}

void SPI_sendString(uint8 *Ptr) {
	while (*Ptr != "\0") {
    1a8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8e:	80 81       	ld	r24, Z
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	80 36       	cpi	r24, 0x60	; 96
    1a98:	92 07       	cpc	r25, r18
    1a9a:	69 f7       	brne	.-38     	; 0x1a76 <SPI_sendString+0x10>
		SPI_sendByte(*Ptr);
		Ptr++;
	}
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <SPI_receiveString>:

void SPI_receiveString(uint8 *Ptr){
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <SPI_receiveString+0x6>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
	*Ptr = SPI_receiveByte();
    1ab4:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <SPI_receiveByte>
    1ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aba:	fa 81       	ldd	r31, Y+2	; 0x02
    1abc:	80 83       	st	Z, r24
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <SPI_receiveString+0x2e>
	while (*Ptr != "#") {
		Ptr++;
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
		*Ptr = SPI_receiveByte();
    1aca:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <SPI_receiveByte>
    1ace:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad2:	80 83       	st	Z, r24
	}
}

void SPI_receiveString(uint8 *Ptr){
	*Ptr = SPI_receiveByte();
	while (*Ptr != "#") {
    1ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad8:	80 81       	ld	r24, Z
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	82 36       	cpi	r24, 0x62	; 98
    1ae2:	92 07       	cpc	r25, r18
    1ae4:	69 f7       	brne	.-38     	; 0x1ac0 <SPI_receiveString+0x1a>
		Ptr++;
		*Ptr = SPI_receiveByte();
	}
	*Ptr = '\0';
    1ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aea:	10 82       	st	Z, r1
}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <UART_init>:
 *      Author: Amr Ramadan
 */
#include "uart.h"
#define BOUD_PRESCALE (((F_CPU /(USART_BOUDRATE*8UL)))-1)

void UART_init(void) {
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	/*/*USART Control and Status Register A >> UCSRA
	 * 		U2X=1 : Enable Double USART Transmission speed
	 */
	UCSRA = (1 << U2X);
    1afe:	eb e2       	ldi	r30, 0x2B	; 43
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	82 e0       	ldi	r24, 0x02	; 2
    1b04:	80 83       	st	Z, r24

	/*USART Control and Status Register B >> UCSRB
	 * 		RXC=1 :to able to
	 */
	UCSRB = (1 << RXEN) | (1 << TXEN);
    1b06:	ea e2       	ldi	r30, 0x2A	; 42
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	88 e1       	ldi	r24, 0x18	; 24
    1b0c:	80 83       	st	Z, r24

	/* USART Control and Status Register C >> UCSRC
	 * 		URSEL = 1 : To able to write in this register
	 * 		UCSZ1:UCSZ0 = 11 : 8-bit mode
	 */
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
    1b0e:	e0 e4       	ldi	r30, 0x40	; 64
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	86 e8       	ldi	r24, 0x86	; 134
    1b14:	80 83       	st	Z, r24

	//The URSEL must be zero when writing the UBRRH.
	UBRRH = 0;
    1b16:	e0 e4       	ldi	r30, 0x40	; 64
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	10 82       	st	Z, r1
	UBRRL = BOUD_PRESCALE;
    1b1c:	e9 e2       	ldi	r30, 0x29	; 41
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	8c e0       	ldi	r24, 0x0C	; 12
    1b22:	80 83       	st	Z, r24

}
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <UART_sendByte>:
 * Note:
 * 		The USART Transmit Data Buffer Register
 * 		and USART Receive Data Buffer Registers share the
 * 		same I/O address referred to as USART Data Register or UDR.
 */
void UART_sendByte(uint8 Data) {
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	0f 92       	push	r0
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	89 83       	std	Y+1, r24	; 0x01
	UDR = Data;   // copy char into UDR register
    1b36:	ec e2       	ldi	r30, 0x2C	; 44
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(UCSRA, TXC))
    1b3e:	eb e2       	ldi	r30, 0x2B	; 43
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	80 74       	andi	r24, 0x40	; 64
    1b4a:	90 70       	andi	r25, 0x00	; 0
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	b9 f3       	breq	.-18     	; 0x1b3e <UART_sendByte+0x14>
		; // wait until transmission complete ( flag is set )
	SET_BIT(UCSRA, TXC); // Clear the TXC flag
    1b50:	ab e2       	ldi	r26, 0x2B	; 43
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	eb e2       	ldi	r30, 0x2B	; 43
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 64       	ori	r24, 0x40	; 64
    1b5c:	8c 93       	st	X, r24
}
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <UART_receiveByte>:

uint8 UART_receiveByte(void) {
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * RXC flag is set when the UART Receive data
	 * Read the received data from RX buffer (UDR)
	 * wait until the RXC flag is cleared after read the data
	 */
	while (BIT_IS_CLEAR(UCSRA, RXC))
    1b6e:	eb e2       	ldi	r30, 0x2B	; 43
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	88 23       	and	r24, r24
    1b76:	dc f7       	brge	.-10     	; 0x1b6e <UART_receiveByte+0x8>
		; // Receive Buffer is Empty ( no pending data )
	return UDR;
    1b78:	ec e2       	ldi	r30, 0x2C	; 44
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
}
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <UART_sendString>:

void UART_sendString(uint8 *Ptr) {
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <UART_sendString+0x6>
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	0a c0       	rjmp	.+20     	; 0x1ba8 <UART_sendString+0x24>
	while (*Ptr != "\0") {
		UART_sendByte(*Ptr);
    1b94:	e9 81       	ldd	r30, Y+1	; 0x01
    1b96:	fa 81       	ldd	r31, Y+2	; 0x02
    1b98:	80 81       	ld	r24, Z
    1b9a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <UART_sendByte>
		Ptr++;
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
		; // Receive Buffer is Empty ( no pending data )
	return UDR;
}

void UART_sendString(uint8 *Ptr) {
	while (*Ptr != "\0") {
    1ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    1baa:	fa 81       	ldd	r31, Y+2	; 0x02
    1bac:	80 81       	ld	r24, Z
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	84 36       	cpi	r24, 0x64	; 100
    1bb6:	92 07       	cpc	r25, r18
    1bb8:	69 f7       	brne	.-38     	; 0x1b94 <UART_sendString+0x10>
		UART_sendByte(*Ptr);
		Ptr++;
	}
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <UART_receiveString>:

void UART_receiveString(uint8 *Ptr) {
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <UART_receiveString+0x6>
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	*Ptr = UART_receiveByte();
    1bd2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <UART_receiveByte>
    1bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bda:	80 83       	st	Z, r24
    1bdc:	0a c0       	rjmp	.+20     	; 0x1bf2 <UART_receiveString+0x2e>
	while (*Ptr != "#") {
		Ptr++;
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
		*Ptr = UART_receiveByte();
    1be8:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <UART_receiveByte>
    1bec:	e9 81       	ldd	r30, Y+1	; 0x01
    1bee:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf0:	80 83       	st	Z, r24
	}
}

void UART_receiveString(uint8 *Ptr) {
	*Ptr = UART_receiveByte();
	while (*Ptr != "#") {
    1bf2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf6:	80 81       	ld	r24, Z
    1bf8:	88 2f       	mov	r24, r24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	86 36       	cpi	r24, 0x66	; 102
    1c00:	92 07       	cpc	r25, r18
    1c02:	69 f7       	brne	.-38     	; 0x1bde <UART_receiveString+0x1a>
		Ptr++;
		*Ptr = UART_receiveByte();
	}
	*Ptr = '\0';
    1c04:	e9 81       	ldd	r30, Y+1	; 0x01
    1c06:	fa 81       	ldd	r31, Y+2	; 0x02
    1c08:	10 82       	st	Z, r1
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <__prologue_saves__>:
    1c14:	2f 92       	push	r2
    1c16:	3f 92       	push	r3
    1c18:	4f 92       	push	r4
    1c1a:	5f 92       	push	r5
    1c1c:	6f 92       	push	r6
    1c1e:	7f 92       	push	r7
    1c20:	8f 92       	push	r8
    1c22:	9f 92       	push	r9
    1c24:	af 92       	push	r10
    1c26:	bf 92       	push	r11
    1c28:	cf 92       	push	r12
    1c2a:	df 92       	push	r13
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	ca 1b       	sub	r28, r26
    1c3e:	db 0b       	sbc	r29, r27
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	09 94       	ijmp

00001c4c <__epilogue_restores__>:
    1c4c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c4e:	39 88       	ldd	r3, Y+17	; 0x11
    1c50:	48 88       	ldd	r4, Y+16	; 0x10
    1c52:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c54:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c56:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c58:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c5e:	b9 84       	ldd	r11, Y+9	; 0x09
    1c60:	c8 84       	ldd	r12, Y+8	; 0x08
    1c62:	df 80       	ldd	r13, Y+7	; 0x07
    1c64:	ee 80       	ldd	r14, Y+6	; 0x06
    1c66:	fd 80       	ldd	r15, Y+5	; 0x05
    1c68:	0c 81       	ldd	r16, Y+4	; 0x04
    1c6a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c6c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c6e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c70:	ce 0f       	add	r28, r30
    1c72:	d1 1d       	adc	r29, r1
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	ed 01       	movw	r28, r26
    1c80:	08 95       	ret

00001c82 <itoa>:
    1c82:	fb 01       	movw	r30, r22
    1c84:	9f 01       	movw	r18, r30
    1c86:	e8 94       	clt
    1c88:	42 30       	cpi	r20, 0x02	; 2
    1c8a:	c4 f0       	brlt	.+48     	; 0x1cbc <itoa+0x3a>
    1c8c:	45 32       	cpi	r20, 0x25	; 37
    1c8e:	b4 f4       	brge	.+44     	; 0x1cbc <itoa+0x3a>
    1c90:	4a 30       	cpi	r20, 0x0A	; 10
    1c92:	29 f4       	brne	.+10     	; 0x1c9e <itoa+0x1c>
    1c94:	97 fb       	bst	r25, 7
    1c96:	1e f4       	brtc	.+6      	; 0x1c9e <itoa+0x1c>
    1c98:	90 95       	com	r25
    1c9a:	81 95       	neg	r24
    1c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9e:	64 2f       	mov	r22, r20
    1ca0:	77 27       	eor	r23, r23
    1ca2:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__udivmodhi4>
    1ca6:	80 5d       	subi	r24, 0xD0	; 208
    1ca8:	8a 33       	cpi	r24, 0x3A	; 58
    1caa:	0c f0       	brlt	.+2      	; 0x1cae <itoa+0x2c>
    1cac:	89 5d       	subi	r24, 0xD9	; 217
    1cae:	81 93       	st	Z+, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	a1 f7       	brne	.-24     	; 0x1c9e <itoa+0x1c>
    1cb6:	16 f4       	brtc	.+4      	; 0x1cbc <itoa+0x3a>
    1cb8:	5d e2       	ldi	r21, 0x2D	; 45
    1cba:	51 93       	st	Z+, r21
    1cbc:	10 82       	st	Z, r1
    1cbe:	c9 01       	movw	r24, r18
    1cc0:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <strrev>

00001cc4 <strrev>:
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	67 2f       	mov	r22, r23
    1cca:	71 91       	ld	r23, Z+
    1ccc:	77 23       	and	r23, r23
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <strrev+0x4>
    1cd0:	32 97       	sbiw	r30, 0x02	; 2
    1cd2:	04 c0       	rjmp	.+8      	; 0x1cdc <strrev+0x18>
    1cd4:	7c 91       	ld	r23, X
    1cd6:	6d 93       	st	X+, r22
    1cd8:	70 83       	st	Z, r23
    1cda:	62 91       	ld	r22, -Z
    1cdc:	ae 17       	cp	r26, r30
    1cde:	bf 07       	cpc	r27, r31
    1ce0:	c8 f3       	brcs	.-14     	; 0x1cd4 <strrev+0x10>
    1ce2:	08 95       	ret

00001ce4 <__udivmodhi4>:
    1ce4:	aa 1b       	sub	r26, r26
    1ce6:	bb 1b       	sub	r27, r27
    1ce8:	51 e1       	ldi	r21, 0x11	; 17
    1cea:	07 c0       	rjmp	.+14     	; 0x1cfa <__udivmodhi4_ep>

00001cec <__udivmodhi4_loop>:
    1cec:	aa 1f       	adc	r26, r26
    1cee:	bb 1f       	adc	r27, r27
    1cf0:	a6 17       	cp	r26, r22
    1cf2:	b7 07       	cpc	r27, r23
    1cf4:	10 f0       	brcs	.+4      	; 0x1cfa <__udivmodhi4_ep>
    1cf6:	a6 1b       	sub	r26, r22
    1cf8:	b7 0b       	sbc	r27, r23

00001cfa <__udivmodhi4_ep>:
    1cfa:	88 1f       	adc	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	5a 95       	dec	r21
    1d00:	a9 f7       	brne	.-22     	; 0x1cec <__udivmodhi4_loop>
    1d02:	80 95       	com	r24
    1d04:	90 95       	com	r25
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	08 95       	ret

00001d0c <_exit>:
    1d0c:	f8 94       	cli

00001d0e <__stop_program>:
    1d0e:	ff cf       	rjmp	.-2      	; 0x1d0e <__stop_program>
